{"version":3,"sources":["index.js"],"names":["cmdTimer","cmdParams","sendCommand","params","now","func","host","window","location","fetch","headers","body","JSON","stringify","method","Promise","resolve","reject","clearTimeout","Object","assign","setTimeout","then","response","catch","err","sendObsCommand","args","Player","props","state","name","score","id","field","value","this","setState","cmd","event","changeField","target","Math","max","parseInt","isNaN","className","placeholder","type","onChange","e","onChangeName","onClick","onResetName","onSubScore","onChangeScore","onAddScore","React","Component","Scoreboard","stage","message","connected","selectedScene","scenes","players","playerFilter","ok","onReset","data","json","refs","player1","player2","onResetScore","onClearScore","onResetMatch","onResetStage","onResetMessage","scene","getAttribute","sendChallongeCommand","tournament","challongeTournament","document","getElementById","forEach","style","push","key","data-scene","onSelectStage","playersClass","length","player","toUpperCase","indexOf","ref","onCasuals","onChangeStage","rows","onChangeMessage","onGetChallongePlayers","onResetPlayerFilter","onChangePlayerFilter","onSetPlayer1Name","onSetPlayer2Name","ReactDOM","render"],"mappings":"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","file":"static/js/main.5cdf637d.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst DEV_API_PORT = 0; // set a port for local dev (running backend and react in different ports)\nconst SEND_CMD_TIME = 500; // delay in ms for field change detect/send\n\nvar cmdTimer = 0;\nvar cmdParams = {};\n\nfunction sendCommand(params, now) {\n  var func = (params) => {\n    let host = DEV_API_PORT ? window.location.hostname + ':' + DEV_API_PORT : window.location.host;\n    return fetch('http://' + host + '/api', {headers: {\"content-type\":\"application/json; charset=UTF-8\"}, body: JSON.stringify(params), method: \"POST\"});\n  };\n\n  if (now) {\n    return func(params);\n  }\n  else {\n    return new Promise((resolve, reject) => {\n      if (cmdTimer) {\n        clearTimeout(cmdTimer); \n      }\n      Object.assign(cmdParams, params);\n      cmdTimer = setTimeout(() => { func(cmdParams).then(response => resolve(response)).catch(err => { reject(err); }); cmdParams = {}; }, SEND_CMD_TIME);\n    });\n  }\n}\n\nfunction sendObsCommand(func, args) {\n  let params = {};\n  params.cmd = 'obs';\n  params.func = func;\n  params.args = args;\n  return sendCommand(params, true);\n}\n\nfunction sendChallongeCommand(func, args) {\n  let params = {};\n  params.cmd = 'challonge';\n  params.func = func;\n  params.args = args;\n  return sendCommand(params, true);\n}\n\nclass Player extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {name: '', score: '', id: props.id};\n  }\n\n  changeField(field, value) {\n    // update state\n    let params = {};\n    params[field] = value;\n    this.setState(params);\n    // send to api\n    params = {};\n    params.cmd = 'set';\n    params['p' + this.state.id + field] = value;\n    sendCommand(params).catch(err => {});\n  }\n\n  onChangeName(event) {\n    this.changeField('name', event.target.value);\n  }\n\n  onResetName(event) {\n    this.changeField('name', '');\n  }  \n\n  onChangeScore(event) {\n    this.changeField('score', event.target.value);\n  }\n\n  onResetScore(event) {\n    this.changeField('score', '0');\n  }\n\n  onClearScore(event) {\n    this.changeField('score', '');\n  }\n\n  onSubScore(event) {\n    var score = 0;\n    try {\n      score = Math.max(parseInt(this.state.score) - 1, 0);\n    }\n    catch { }\n    if (isNaN(score)) {\n      score = 0;\n    }\n    this.changeField('score', score);\n  }\n\n  onAddScore(event) {\n    var score = 1;\n    try {\n      score = parseInt(this.state.score) + 1;\n    }\n    catch { }\n    if (isNaN(score)) {\n      score = 1;\n    }\n    this.changeField('score', score);\n  }\n\n  render() {\n    return (\n      <div className=\"column\">\n        <div className=\"field has-addons\">\n          <div className=\"control is-expanded\">\n            <input className=\"input player\" placeholder={\"Player \" + this.state.id} type=\"text\" value={this.state.name} onChange={e => this.onChangeName(e)}/>\n          </div>\n          <div className=\"control\">\n            <button className=\"button is-danger\" onClick={e => this.onResetName(e)}>\n              <span className=\"icon is-small\">\n                <i className=\"fas fa-times\"/>\n              </span>\n            </button>\n          </div>\n        </div>\n        <div className=\"content field has-addons\">\n          <div className=\"control\">\n            <button className=\"button is-large\" onClick={e => this.onSubScore(e)}>-</button>\n          </div>\n          <div className=\"control is-expanded\">\n            <input className=\"input is-large\" type=\"text\" value={this.state.score} onChange={e => this.onChangeScore(e)}/>\n          </div>\n          <div className=\"control\">\n            <button className=\"button is-large\" onClick={e => this.onAddScore(e)}>+</button>\n          </div>\n        </div>        \n      </div>\n    );\n  }\n}\n\nclass Scoreboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {stage: '', message: '', connected: 'Connecting...', selectedScene: '', scenes: [], players: [], playerFilter: ''};\n    // Login to check API\n    sendCommand({cmd: 'login'}, true)\n    .then(response => {\n      this.setState({connected: response.ok ? 'Connected' : 'Service error!'});\n      this.onReset();\n      // Request OBS scenes\n      sendObsCommand('login')\n      .then(data => {\n        data.json()\n        .then(data => {\n          this.setState({selectedScene: data.selectedScene, scenes: data.scenes});\n        })\n        .catch(err => {});\n      })\n      .catch(err => {});\n    })\n    .catch(err => {});\n  }\n\n  changeField(field, value) {\n    // update state\n    let params = {};\n    params[field] = value;\n    this.setState(params);\n    // send to api\n    params.cmd = 'set';\n    sendCommand(params).catch(err => {});\n  }\n\n    onResetMatch(event) {\n    this.refs.player1.onResetName();\n    this.refs.player2.onResetName();\n    this.refs.player1.onResetScore();\n    this.refs.player2.onResetScore();\n  }\n\n  onCasuals(event) {\n    this.refs.player1.onClearScore();\n    this.refs.player2.onClearScore();\n    this.changeField('stage', 'CASUALS');\n  }  \n\n  onChangeStage(event) {\n    this.changeField('stage', event.target.value);\n  }\n\n  onResetStage(event) {\n    this.changeField('stage', '');\n  }\n\n  onChangeMessage(event) {\n    this.changeField('message', event.target.value);\n  }\n\n  onResetMessage(event) {\n    this.changeField('message', '');\n  }\n\n  onReset(event) {\n    this.onResetMatch();\n    this.onResetStage();\n    this.onResetMessage();\n  }  \n\n  onSelectStage(event) {\n    let scene = event.target.getAttribute('data-scene');\n    this.setState({selectedScene: scene});\n    sendObsCommand('SetCurrentScene', {'scene-name': scene});\n  }\n\n  onGetChallongePlayers(event) {\n    this.setState({players: []});\n    sendChallongeCommand('players', {tournament: this.challongeTournament})\n    .then(data => {\n      data.json()\n      .then(data => {\n        this.setState({players: data.players});\n      });\n    })\n    .catch(err => {});\n  }\n\n  onResetPlayerFilter(event) {\n    this.setState({playerFilter: ''});\n  }\n\n  onChangePlayerFilter(event) {\n    this.setState({playerFilter: event.target.value});\n  }\n\n  onSetPlayer1Name(event) {\n    this.refs.player1.onChangeName({target: {value: document.getElementById(\"playerName\").value}});\n  }\n\n  onSetPlayer2Name(event) {\n    this.refs.player2.onChangeName({target: {value: document.getElementById(\"playerName\").value}});\n  }  \n\n  render() {\n    var scenes = [];\n    if (this.state.scenes) {\n      this.state.scenes.forEach(scene => {\n        var style = 'button is-light';\n        if (this.state.selectedScene === scene) {\n          style += ' is-primary is-outlined';\n        }\n        scenes.push(<button className={style} key={scene} data-scene={scene} onClick={e => this.onSelectStage(e)}>{scene}</button>);\n      });\n    }\n\n    var players = [];\n    var playersClass = 'level-item';\n    if (!this.state.players.length) {\n      playersClass+=' is-hidden';\n    }    \n    this.state.players.forEach(player => {\n      if (player.toUpperCase().indexOf(this.state.playerFilter.toUpperCase()) >= 0) {\n        players.push(<option value={player} key={player}>{player}</option>);\n      }\n    });\n\n    return (\n      <div className=\"container\">\n        <div className=\"box\">\n          <div className=\"columns\">\n            <Player ref=\"player1\" id=\"1\"/>\n            <div className=\"column is-one-quarter\">\n              <button className=\"button is-primary is-fullwidth gap\" onClick={e => this.onResetMatch(e)}>Reset Match</button>\n              <button className=\"button is-primary is-fullwidth gap\" onClick={e => this.onCasuals(e)}>Casuals</button>\n            </div>\n            <Player ref=\"player2\" id=\"2\"/>\n          </div>\n          <input className=\"input is-half-width gap\" placeholder=\"Stage\" type=\"text\" value={this.state.stage} onChange={e => this.onChangeStage(e)} />          \n          <textarea className=\"textarea is-expanded gap\" placeholder=\"Message\" rows=\"2\" type=\"text\" value={this.state.message} onChange={e => this.onChangeMessage(e)} />\n          <div className=\"buttons are-medium is-centered\">\n            <button className=\"button is-centered is-danger is-medium gap\" onClick={e => this.onReset(e)}>RESET</button>\n          </div>\n          <div className=\"buttons are-medium is-centered\">\n            {scenes}\n          </div>\n          <nav className=\"level gap\">\n            <div className=\"level-item\">\n              <div className=\"field has-addons\">\n                <div className=\"control\">\n                  <input className=\"input is-quarter-width\" placeholder=\"Tournament\" onChange={e => {this.challongeTournament=e.target.value;}}/>\n                </div>\n                <div className=\"control\">\n                  <button className=\"button is-primary\" onClick={e => this.onGetChallongePlayers(e)}>Fetch Challonge Players</button>\n                </div>\n              </div>\n            </div>\n            <div className={playersClass}>\n              <div className=\"field has-addons\">\n                <div className=\"control\">\n                  <button className=\"button is-danger\" onClick={e => this.onResetPlayerFilter(e)}>\n                    <span className=\"icon is-small\">\n                      <i className=\"fas fa-times\"/>\n                    </span>\n                  </button>\n                </div>\n                <div className=\"control\">\n                  <input className=\"input\" value={this.state.playerFilter} placeholder=\"Filter\" onChange={e => this.onChangePlayerFilter(e)}/>\n                </div>\n                <div className=\"control\">\n                  <div className=\"select\">\n                    <select id=\"playerName\" ref=\"playerName\">\n                      {players}\n                    </select>\n                  </div>\n                </div>\n              </div>\n              <button className=\"button is-primary gap\" onClick={e => this.onSetPlayer1Name(e)}>To P1</button>\n              <button className=\"button is-primary gap\" onClick={e => this.onSetPlayer2Name(e)}>To P2</button>\n            </div>\n          </nav>\n        </div>\n        <div className=\"small-text has-text-centered\">\n          {this.state.connected}\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Scoreboard />, document.getElementById('root'));\n"],"sourceRoot":""}